[{"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\App.js":"1","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\StudentTable.js":"2","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\students.js":"3","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\columns.js":"4","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\index.js":"5","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\reportWebVitals.js":"6","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\StudentEditor.js":"7","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\StudentEditorModel.js":"8"},{"size":560,"mtime":1607853590123,"results":"9","hashOfConfig":"10"},{"size":5158,"mtime":1608154566082,"results":"11","hashOfConfig":"10"},{"size":8574,"mtime":1609370930130,"results":"12","hashOfConfig":"10"},{"size":761,"mtime":1607269531680,"results":"13","hashOfConfig":"10"},{"size":496,"mtime":1607875208623,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1606226884226,"results":"15","hashOfConfig":"10"},{"size":3801,"mtime":1607449868782,"results":"16","hashOfConfig":"10"},{"size":12169,"mtime":1608150747405,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"rnvtni",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\App.js",[],["42","43"],"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\StudentTable.js",["44","45"],"import React, { useState, useCallback, memo, useMemo } from \"react\";\r\nimport { useTable, useSortBy } from \"react-table\";\r\nimport { Button } from \"reactstrap\";\r\nimport \"./table.css\";\r\n\r\nconst StudentTable = ({ data, handleShowEditModel, handleDeleteAction }) => {\r\n  console.log(\" StudentTable reached\");\r\n  console.log(\" StudentTable data = \", data);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"#\",\r\n        Footer: \"Id\",\r\n        accessor: \"id\",\r\n      },\r\n      {\r\n        Header: \"Name\",\r\n        Footer: \"Name\",\r\n        accessor: \"name\",\r\n        // Cell: function (props) {\r\n        //   // <StudentEditorModel\r\n        //   //   showModelObj={showEditorModelObj}\r\n        //   //   // handleShowEditModel={handleShowEditModel}\r\n        //   // />;\r\n        //   // return (\r\n        //   //   <Link\r\n        //   //     to={{\r\n        //   //       pathname:\r\n        //   //         \"/cadences/\" + props.row.original.id + \"/touches/view\",\r\n        //   //       search: window.location.search,\r\n        //   //       state: {\r\n        //   //         allCadencesData: props.cadenceData,\r\n        //   //         origin: location.pathname,\r\n        //   //         filterParams: location.search,\r\n        //   //         cadence: props.row.original,\r\n        //   //         cadenceName: props.value,\r\n        //   //       },\r\n        //   //     }}\r\n        //   //     className=\"text-header text-break\"\r\n        //   //   >\r\n        //   //     <strong>{props.value}</strong>\r\n        //   //   </Link>\r\n        //   // );\r\n        // }\r\n      },\r\n      {\r\n        Header: \"Date Of Birth\",\r\n        Footer: \"Date Of Birth\",\r\n        accessor: \"dateOfBirth\",\r\n      },\r\n      {\r\n        Header: \"Address\",\r\n        Footer: \"Address\",\r\n        accessor: \"address\",\r\n      },\r\n      {\r\n        Header: \"Gender\",\r\n        Footer: \"Gender\",\r\n        accessor: \"gender\",\r\n      },\r\n      {\r\n        Header: \"Contact No\",\r\n        Footer: \"Contact No\",\r\n        accessor: \"contactNumber\",\r\n      },\r\n      {\r\n        Header: \"Sports\",\r\n        Footer: \"Sports\",\r\n        accessor: \"sports\",\r\n      },\r\n      {\r\n        Header: \"Curriculums\",\r\n        Footer: \"Curriculums\",\r\n        accessor: \"curriculums\",\r\n      },\r\n      {\r\n        Header: \"Action\",\r\n        Footer: \"Action\",\r\n        accessor: \"action\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data }, useSortBy);\r\n\r\n  return (\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                {column.render(\"Header\")}\r\n                <span>\r\n                  {column.isSorted\r\n                    ? column.isSortedDesc\r\n                      ? \"  - Desc\"\r\n                      : \"  - Asc\"\r\n                    : \"\"}\r\n                </span>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr key={row.original.id} {...row.getRowProps()}>\r\n              {row.cells.map((cell, i) => {\r\n                if (row.cells.length - 1 !== i) {\r\n                  return (\r\n                    <td key={i} {...cell.getCellProps}>\r\n                      {cell.render(\"Cell\")}\r\n                    </td>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <td key={i}>\r\n                      <div>\r\n                        <span className=\"col text-center\">\r\n                          <Button\r\n                            color=\"primary\"\r\n                            onClick={() =>\r\n                              handleShowEditModel(cell.row.original.id)\r\n                            }\r\n                            className=\"text-center\"\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                        </span>\r\n                        <span>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id={cell.row.original.id}\r\n                            name=\"delete\"\r\n                            onChange={handleDeleteAction}\r\n                            defaultChecked={false}\r\n                          />\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n                  );\r\n                }\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n      {/* <tfoot>\r\n        {footerGroups.map((footerGroup) => (\r\n          <tr {...footerGroup.getFooterGroupProps()}>\r\n            {footerGroup.headers.map((column) => (\r\n              <td {...column.getFooterProps}>{column.render(\"Footer\")}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tfoot> */}\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default memo(StudentTable);\r\n","C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\students.js",["46","47"],"import React, { useState, useEffect, useMemo, memo, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport StudentTable from \"./StudentTable\";\r\nimport StudentEditorModel from \"./StudentEditorModel\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Alert, Button, ButtonGroup } from \"reactstrap\";\r\n\r\nconst Students = ({ location, history }) => {\r\n  console.log(\" Students is started \");\r\n  console.log(\" Students location = \", location);\r\n  console.log(\" Students history = \", history);\r\n\r\n  const [data, setData] = useState([]);\r\n  console.log(\" Students data = \", data);\r\n\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const [deleteIds, setDeleteIds] = useState(new Set());\r\n\r\n  const [showEditorModelObj, setShowEditorModelObj] = useState({\r\n    showModel: false,\r\n    id: \"\",\r\n  });\r\n\r\n  const fetchData = useCallback(() => {\r\n    console.log(\"Students useEffect is started \");\r\n\r\n    let apiUrl = \"http://localhost:8081/students-list-app/api/v1/students\";\r\n\r\n    console.log(\"Students useEffect apiUrl = \", apiUrl);\r\n\r\n    (async () => {\r\n      await axios\r\n        .get(apiUrl)\r\n        .then((response) => {\r\n          console.log(\"Students - useEffect - response = \", response);\r\n          setData([...response.data.data]);\r\n        })\r\n        .catch((error) => {\r\n          setIsError(true);\r\n          console.log(error);\r\n        });\r\n    })();\r\n\r\n    // fetch(apiUrl).then((res) => res.json).then((response) => setData([...response.data]).catch((error) => { setIsError(true); console.log(error) })\r\n    // fetch(apiUrl)\r\n    //   .then((res) => res.json())\r\n    //   .then((response) => {\r\n    //     setData([...response.data]);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     setIsError(true);\r\n    //     console.log(error);\r\n    //   });\r\n\r\n    // working\r\n    // axios\r\n    //   .get(apiUrl)\r\n    //   .then((response) => {\r\n    //     console.log(\"Students - useEffect - response = \", response);\r\n    //     setData([...response.data.data]);\r\n    //     // setRefetch(false);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     setIsError(true);\r\n    //     console.log(error);\r\n    //   });\r\n    console.log(\"Students useEffect is ended \");\r\n  }, []);\r\n\r\n  const deleteData = useCallback(() => {\r\n    console.log(\"deleteData useCallback is started \");\r\n\r\n    if (!deleteIds || deleteIds.size === 0) {\r\n      alert(\"Please select student(s)\");\r\n      return;\r\n    }\r\n\r\n    let deleteIdStr = new Array(...deleteIds).join(\",\");\r\n\r\n    let apiUrl = `http://localhost:8081/students-list-app/api/v1/students/${deleteIdStr}`;\r\n\r\n    console.log(\"Students useEffect apiUrl = \", apiUrl);\r\n\r\n    (async () => {\r\n      await axios\r\n        .delete(apiUrl)\r\n        .then((response) => {\r\n          console.log(\"Students - useEffect - response = \", response);\r\n          deleteIds.clear();\r\n          // setDeleteIds(deleteIds);\r\n          // fetchData();\r\n          window.location.reload();\r\n        })\r\n        .catch((error) => {\r\n          setIsError(true);\r\n          console.log(error);\r\n        });\r\n    })();\r\n    console.log(\"deleteData useCallback is ended\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleShowEditModel = (rowId) => {\r\n    console.log(\"Students  handleShowEditModel is called with rowId = \", rowId);\r\n    setShowEditorModelObj({ showModel: true, id: rowId });\r\n  };\r\n\r\n  const toggleEditorModel = () => {\r\n    console.log(\r\n      \"Students  toggleEditorModel is called showEditorModelObj = \",\r\n      showEditorModelObj\r\n    );\r\n    setShowEditorModelObj({ showModel: false });\r\n    fetchData();\r\n  };\r\n\r\n  const handleDeleteAction = (e) => {\r\n    console.log(\r\n      \"Students  handleDeleteAction is started deleteId = \",\r\n      e.target.id\r\n    );\r\n\r\n    if (!e.target.checked) {\r\n      deleteIds.delete(e.target.id);\r\n    } else {\r\n      deleteIds.add(e.target.id);\r\n    }\r\n\r\n    setDeleteIds(deleteIds);\r\n\r\n    console.log(\r\n      \"Students  handleDeleteAction is ended deleteIds = \",\r\n      deleteIds\r\n    );\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => fetchData(), []);\r\n\r\n  if (isError) {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <nav className=\"navbar navbar-light bg-light text-cente\">\r\n            <span className=\"navbar-brand mb-0 h1r\">Student - List - App</span>\r\n            <span>\r\n              <ButtonGroup>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => fetchData()}\r\n                >\r\n                  RESET\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => handleShowEditModel()}\r\n                >\r\n                  ADD\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => deleteData()}\r\n                >\r\n                  DELETE\r\n                </Button>\r\n              </ButtonGroup>\r\n            </span>\r\n          </nav>\r\n          <span\r\n            style={{\r\n              fontSize: \"30px\",\r\n              color: \"red\",\r\n            }}\r\n          >\r\n            <Alert className=\"text-center\" color=\"danger\">\r\n              Failed to fetch data!\r\n            </Alert>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (data && data.length > 0) {\r\n    console.log(\"StudentTable is called here\");\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <nav className=\"navbar navbar-light bg-light text-cente shadow-lg p-3 mb-5 bg-white rounded\">\r\n            <span className=\"navbar-brand mb-0 h1 text-center\">\r\n              STUDENT - LIST - APP\r\n            </span>\r\n            <span>\r\n              <ButtonGroup>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => fetchData()}\r\n                >\r\n                  RESET\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => handleShowEditModel()}\r\n                >\r\n                  ADD\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => deleteData()}\r\n                >\r\n                  DELETE\r\n                </Button>\r\n              </ButtonGroup>\r\n            </span>\r\n          </nav>\r\n\r\n          <StudentTable\r\n            data={data}\r\n            handleShowEditModel={handleShowEditModel}\r\n            handleDeleteAction={handleDeleteAction}\r\n          />\r\n          {showEditorModelObj.showModel && (\r\n            <StudentEditorModel\r\n              showModelObj={showEditorModelObj}\r\n              toggleEditorModel={toggleEditorModel}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <nav className=\"navbar navbar-light bg-light text-cente\">\r\n            <span className=\"navbar-brand mb-0 h1r\">Student - List - App</span>\r\n            <span>\r\n              <ButtonGroup>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => fetchData()}\r\n                >\r\n                  RESET\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => handleShowEditModel()}\r\n                >\r\n                  ADD\r\n                </Button>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  className=\"mr-3\"\r\n                  onClick={() => deleteData()}\r\n                >\r\n                  DELETE\r\n                </Button>\r\n              </ButtonGroup>\r\n            </span>\r\n          </nav>\r\n          <span\r\n            style={{\r\n              fontSize: \"30px\",\r\n              color: \"blue\",\r\n            }}\r\n          >\r\n            <Alert className=\"text-center\" color=\"primary\">\r\n              No Data Available!\r\n            </Alert>\r\n          </span>\r\n        </div>\r\n\r\n        {showEditorModelObj.showModel && (\r\n          <StudentEditorModel\r\n            showModelObj={showEditorModelObj}\r\n            toggleEditorModel={toggleEditorModel}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(Students);\r\n",["48","49"],"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\columns.js",[],["50","51"],"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\index.js",[],"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\reportWebVitals.js",[],["52","53"],"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\StudentEditor.js",[],["54","55"],"C:\\vignesh_files\\MY WORKS\\REACT_WORKS\\students-list-app\\src\\components\\StudentEditorModel.js",["56","57","58","59","60","61","62","63","64","65","66","67","68"],"import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardHeader,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Progress,\r\n  Alert,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\nimport PhoneInput from \"react-phone-number-input/input\";\r\nimport { isValidPhoneNumber } from \"react-phone-number-input\";\r\nvar DatePicker = require(\"reactstrap-date-picker\");\r\n\r\nconst StudentEditorModel = ({ showModelObj, toggleEditorModel }) => {\r\n  //   const { buttonLabel, className } = props;\r\n  console.log(\"StudentEditorModel id = \", showModelObj.id);\r\n\r\n  const [studData, setStudData] = useState();\r\n\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const { handleSubmit, register, errors } = useForm();\r\n\r\n  let studId = showModelObj.id;\r\n\r\n  let modaleIsOpen = showModelObj.showModel;\r\n\r\n  useEffect(() => {\r\n    if (studId) {\r\n      let apiUrl = `http://localhost:8081/students-list-app/api/v1/students/${studId}`;\r\n      console.log(\"StudentEditorModel useEffect apiUrl = \", apiUrl);\r\n      axios\r\n        .get(apiUrl)\r\n        .then((response) => {\r\n          console.log(\"response = \", response);\r\n          let studdData = response.data.data[0];\r\n          setStudData(studdData);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setIsError(true);\r\n          return (\r\n            <div>\r\n              <span\r\n                style={{\r\n                  fontSize: \"30px\",\r\n                  color: \"red\",\r\n                }}\r\n              >\r\n                <Alert style={{ textAlign: \"center\" }} color=\"danger\">\r\n                  Failed to fetch data!\r\n                </Alert>\r\n              </span>\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  }, [studId]);\r\n\r\n  const handleSportsChange = (e) => {\r\n    const { target } = e;\r\n    console.log(target.name + \" = \" + target.checked);\r\n  };\r\n\r\n  const handleCurriculumsChange = (e) => {\r\n    const { target } = e;\r\n    console.log(target.value + \" = \" + target.checked);\r\n  };\r\n\r\n  const dataSubmit = (data, e) => {\r\n    console.log(\"StudentEditorModel submitted data = \", data);\r\n    let sportStr = new Set();\r\n\r\n    if (data.cricket) {\r\n      sportStr.add(\"cricket\");\r\n    }\r\n\r\n    if (data.football) {\r\n      sportStr.add(\"football\");\r\n    }\r\n\r\n    if (data.hockey) {\r\n      sportStr.add(\"hockey\");\r\n    }\r\n\r\n    data = { ...data, sports: new Array(...sportStr).join(\",\") };\r\n\r\n    console.log(\r\n      \"StudentEditorModel submitted after added sports data = \",\r\n      data\r\n    );\r\n\r\n    let apiUrl = studId\r\n      ? `http://localhost:8081/students-list-app/api/v1/students/${studId}`\r\n      : `http://localhost:8081/students-list-app/api/v1/students`;\r\n\r\n    console.log(\"StudentEditorModel dataSubmit useEffect apiUrl = \", apiUrl);\r\n\r\n    if (studId) {\r\n      axios\r\n        .put(apiUrl, data)\r\n        .then((response) => {\r\n          console.log(\"StudentEditorModel dataSubmit response = \", response);\r\n          toggleEditorModel(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setIsError(true);\r\n          return (\r\n            <div>\r\n              <span\r\n                style={{\r\n                  fontSize: \"30px\",\r\n                  color: \"red\",\r\n                }}\r\n              >\r\n                <Alert style={{ textAlign: \"center\" }} color=\"danger\">\r\n                  Failed to fetch data!\r\n                </Alert>\r\n              </span>\r\n            </div>\r\n          );\r\n        });\r\n    } else {\r\n      axios\r\n        .post(apiUrl, data)\r\n        .then((response) => {\r\n          console.log(\"StudentEditorModel dataSubmit response = \", response);\r\n          toggleEditorModel(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setIsError(true);\r\n          return (\r\n            <div>\r\n              <span\r\n                style={{\r\n                  fontSize: \"30px\",\r\n                  color: \"red\",\r\n                }}\r\n              >\r\n                <Alert style={{ textAlign: \"center\" }} color=\"danger\">\r\n                  Failed to fetch data!\r\n                </Alert>\r\n              </span>\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  if (isError) {\r\n    return (\r\n      <div>\r\n        <span\r\n          style={{\r\n            fontSize: \"30px\",\r\n            color: \"red\",\r\n          }}\r\n        >\r\n          <Alert className=\"text-center\" color=\"danger\">\r\n            Failed to fetch / update data!\r\n          </Alert>\r\n        </span>\r\n      </div>\r\n    );\r\n  } else {\r\n    console.log(\"StudentEditorModel studData = \", studData);\r\n    return (\r\n      <div>\r\n        <Modal size=\"lg\" centered isOpen={modaleIsOpen}>\r\n          <ModalHeader>\r\n            {studId && studData && studData.name\r\n              ? `Edit Student - ${studData.name}`\r\n              : \"Add Student\"}\r\n          </ModalHeader>\r\n          <Form onSubmit={handleSubmit(dataSubmit)}>\r\n            <ModalBody>\r\n              <FormGroup>\r\n                <Label for=\"name\">Name</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  invalid={errors.name && errors.name.message}\r\n                  placeholder=\"Enter Student Name\"\r\n                  innerRef={register({ required: \"Name is required\" })}\r\n                  defaultValue={studData && studData.name}\r\n                />\r\n                {errors.name && (\r\n                  <span style={{ color: \"red\" }}>{errors.name.message}</span>\r\n                )}\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"gender\">Gender</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"gender\"\r\n                  id=\"gender\"\r\n                  invalid={errors.gender}\r\n                  placeholder=\"Select Student Gender\"\r\n                  innerRef={register({ required: \"Gender is required\" })}\r\n                  defaultValue={studData && studData.gender}\r\n                >\r\n                  <option value=\"female\">Female</option>\r\n                  <option value=\"male\">Male</option>\r\n                </Input>\r\n                <ErrorMessage\r\n                  errors={errors}\r\n                  name=\"gender\"\r\n                  className=\"text-center\"\r\n                ></ErrorMessage>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"dateOfBirth\">Date of Birth</Label>\r\n                <Input\r\n                  type=\"date\"\r\n                  name=\"dateOfBirth\"\r\n                  id=\"dateOfBirth\"\r\n                  invalid={errors.dateOfBirth}\r\n                  placeholder=\"Enter Date of Birth\"\r\n                  innerRef={register({ required: \"Date of Birth is required\" })}\r\n                  defaultValue={studData && studData.dateOfBirth}\r\n                />\r\n                <ErrorMessage errors={errors} name=\"dateOfBirth\"></ErrorMessage>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"address\">Address</Label>\r\n                <Input\r\n                  type=\"textarea\"\r\n                  name=\"address\"\r\n                  id=\"address\"\r\n                  invalid={errors.address}\r\n                  placeholder=\"Enter Student Address\"\r\n                  innerRef={register({ required: \"Address is required\" })}\r\n                  defaultValue={studData && studData.address}\r\n                />\r\n                <ErrorMessage\r\n                  errors={errors}\r\n                  name=\"address\"\r\n                  className=\"text-center\"\r\n                ></ErrorMessage>\r\n              </FormGroup>\r\n              <br />\r\n              <FormGroup>\r\n                <Label for=\"contactNumber\">Contact No</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"contactNumber\"\r\n                  id=\"contactNumber\"\r\n                  invalid={errors.contactNumber}\r\n                  placeholder=\"Enter Student Contact No\"\r\n                  innerRef={register({ required: \"Contact No is required\" })}\r\n                  defaultValue={studData && studData.contactNumber}\r\n                />\r\n\r\n                <ErrorMessage\r\n                  errors={errors}\r\n                  name=\"contactNumber\"\r\n                  className=\"text-center\"\r\n                ></ErrorMessage>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label>Sports</Label>\r\n                <div>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"cricket\"\r\n                    name=\"cricket\"\r\n                    defaultChecked={\r\n                      studData && studData.sports.includes(\"cricket\")\r\n                    }\r\n                    onChange={handleSportsChange}\r\n                    ref={register({ value: \"cricket\" })}\r\n                  />\r\n                  <Label style={{ marginLeft: \"10px\" }}>Cricket</Label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"football\"\r\n                    name=\"football\"\r\n                    defaultChecked={\r\n                      studData && studData.sports.includes(\"football\")\r\n                    }\r\n                    onChange={handleSportsChange}\r\n                    style={{ marginLeft: \"15px\" }}\r\n                    ref={register({ value: \"football\" })}\r\n                  />\r\n                  <Label style={{ marginLeft: \"10px\" }}>Football</Label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"hockey\"\r\n                    name=\"hockey\"\r\n                    defaultChecked={\r\n                      studData && studData.sports.includes(\"hockey\")\r\n                    }\r\n                    onChange={handleSportsChange}\r\n                    style={{ marginLeft: \"15px\" }}\r\n                    ref={register({ value: \"hockey\" })}\r\n                  />\r\n                  <Label style={{ marginLeft: \"10px\" }}>Hockey</Label>\r\n                </div>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label>Curriculums</Label>\r\n                <div>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"drawing\"\r\n                    name=\"curriculums\"\r\n                    defaultChecked={\r\n                      studData && studData.curriculums.includes(\"drawing\")\r\n                    }\r\n                    ref={register}\r\n                    value=\"drawing\"\r\n                    onChange={handleCurriculumsChange}\r\n                  />\r\n                  <label style={{ marginLeft: \"10px\" }}>Drawing</label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"poetry\"\r\n                    name=\"curriculums\"\r\n                    defaultChecked={\r\n                      studData && studData.curriculums.includes(\"poetry\")\r\n                    }\r\n                    ref={register}\r\n                    value=\"poetry\"\r\n                    onChange={handleCurriculumsChange}\r\n                    style={{ marginLeft: \"15px\" }}\r\n                  />\r\n                  <label style={{ marginLeft: \"10px\" }}>Poetry</label>\r\n                </div>\r\n              </FormGroup>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n              <Button color=\"secondary\" onClick={toggleEditorModel}>\r\n                Cancel\r\n              </Button>\r\n            </ModalFooter>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  } /* else {\r\n    return (\r\n      <div>\r\n        <span\r\n          style={{\r\n            fontSize: \"30px\",\r\n            color: \"blue\",\r\n          }}\r\n        >\r\n          <Alert className=\"text-center\" color=\"primary\">\r\n            No Data Available!\r\n          </Alert>\r\n        </span>\r\n      </div>\r\n    );\r\n  } */\r\n};\r\n\r\nexport default StudentEditorModel;\r\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"77","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":38},{"ruleId":"73","severity":1,"message":"78","line":1,"column":38,"nodeType":"75","messageId":"76","endLine":1,"endColumn":45},{"ruleId":"73","severity":1,"message":"79","line":5,"column":10,"nodeType":"75","messageId":"76","endLine":5,"endColumn":14},{"ruleId":"69","replacedBy":"80"},{"ruleId":"71","replacedBy":"81"},{"ruleId":"69","replacedBy":"82"},{"ruleId":"71","replacedBy":"83"},{"ruleId":"69","replacedBy":"84"},{"ruleId":"71","replacedBy":"85"},{"ruleId":"69","replacedBy":"86"},{"ruleId":"71","replacedBy":"87"},{"ruleId":"73","severity":1,"message":"78","line":1,"column":38,"nodeType":"75","messageId":"76","endLine":1,"endColumn":45},{"ruleId":"73","severity":1,"message":"77","line":1,"column":47,"nodeType":"75","messageId":"76","endLine":1,"endColumn":58},{"ruleId":"73","severity":1,"message":"88","line":8,"column":3,"nodeType":"75","messageId":"76","endLine":8,"endColumn":7},{"ruleId":"73","severity":1,"message":"89","line":9,"column":3,"nodeType":"75","messageId":"76","endLine":9,"endColumn":11},{"ruleId":"73","severity":1,"message":"90","line":10,"column":3,"nodeType":"75","messageId":"76","endLine":10,"endColumn":13},{"ruleId":"73","severity":1,"message":"91","line":11,"column":3,"nodeType":"75","messageId":"76","endLine":11,"endColumn":12},{"ruleId":"73","severity":1,"message":"92","line":12,"column":3,"nodeType":"75","messageId":"76","endLine":12,"endColumn":13},{"ruleId":"73","severity":1,"message":"93","line":13,"column":3,"nodeType":"75","messageId":"76","endLine":13,"endColumn":6},{"ruleId":"73","severity":1,"message":"94","line":14,"column":3,"nodeType":"75","messageId":"76","endLine":14,"endColumn":12},{"ruleId":"73","severity":1,"message":"95","line":19,"column":3,"nodeType":"75","messageId":"76","endLine":19,"endColumn":11},{"ruleId":"73","severity":1,"message":"96","line":25,"column":8,"nodeType":"75","messageId":"76","endLine":25,"endColumn":18},{"ruleId":"73","severity":1,"message":"97","line":26,"column":10,"nodeType":"75","messageId":"76","endLine":26,"endColumn":28},{"ruleId":"73","severity":1,"message":"98","line":27,"column":5,"nodeType":"75","messageId":"76","endLine":27,"endColumn":15},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'useMemo' is defined but never used.","'Link' is defined but never used.",["99"],["100"],["99"],["100"],["99"],["100"],["99"],["100"],"'Card' is defined but never used.","'CardBody' is defined but never used.","'CardFooter' is defined but never used.","'CardTitle' is defined but never used.","'CardHeader' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","'Progress' is defined but never used.","'PhoneInput' is defined but never used.","'isValidPhoneNumber' is defined but never used.","'DatePicker' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]